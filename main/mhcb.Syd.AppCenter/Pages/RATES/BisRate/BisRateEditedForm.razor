

<EditForm Model="ViewModel" OnValidSubmit="Save"
          OnInvalidSubmit="Error">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group row">
        <lable for="DataDate" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Data Date
        </lable>
        <div class="col-sm-4">
            <InputDate id="DataDate" class="form-control" readonly=@IsEdit placeholder="Data Date" @bind-Value="@ViewModel.DataDate"></InputDate>
        </div>
    </div>

    <div class="form-group row">
        <lable for="Ccy" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Currency
        </lable>
        <div class="col-sm-2">
           @* <InputSelect id="Ccy" class="form-control" placeholder="Currency" @bind-Value="@ViewModel.Ccy">
                @foreach (var ccy in Enum.GetValues(typeof(RateCcy)))
                {
                    <option value="@ccy">@ccy</option>
                }
            </InputSelect>*@
            <MizuhoCcy ViewModel="ViewModel" RateCcies="rateCcy" IsEdit=@IsEdit></MizuhoCcy>
        </div>
    </div>

    <div class="form-group row">
        <lable for="Duration" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Duration
        </lable>
        <div class="col-sm-4">
            @*<InputSelect id="Duration" class="form-control" placeholder="Duration" @bind-Value="@ViewModel.Duration">
                @foreach (var duration in rateDuritions)
                {
                    <option value="@duration">@duration</option>
                }
            </InputSelect>*@
            <MonthDurition ViewModel="ViewModel" MonthDuritions="bitRateDuritions" IsEdit=@IsEdit></MonthDurition>
        </div>
    </div>

    <div class="form-group row">
        <lable for="DurationUnit" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Duration Unit
        </lable>
        <div class="col-sm-4">
           @* <InputSelect id="DurationUnit" class="form-control" placeholder="Duration Unit " @bind-Value="@ViewModel.DurationUnit">
                @foreach (var durationunit in Enum.GetValues(typeof(BisRateDurationUnit)))
                {
                    <option value="@durationunit">@durationunit</option>
                }
            </InputSelect>*@
            <DuritionUnit ViewModel="ViewModel" DurationUnit="bisRateDuritionUnit" IsEdit=@IsEdit></DuritionUnit>
        </div>
    </div>

    <div class="form-group row">
        <lable for="BaseRate" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Base Rate
        </lable>
        <div class="col-sm-4">
            <InputNumber id="BaseRate" class=" form-control" placeholder="Base Rate" @bind-Value="@ViewModel.BaseRate"></InputNumber>
            <ValidationMessage For="(() => ViewModel.BaseRate)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row">
        <lable for="ImportedBy" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Imported By
        </lable>
        <div class="col-sm-4">
            <InputText id="ImportedBy" class="form-control" readonly=@IsEdit placeholder ="Imported By" @bind-Value="@ViewModel.ImportedBy"></InputText>
        </div>
    </div>
    <div class="form-group row">
        <lable for="RecStatus" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Rec Status
        </lable>
        <div class="col-sm-4">
            <InputText id="Rec Status" class="form-control" readonly=@IsEdit placeholder="Rec Status" @bind-Value="@ViewModel.RecStatus"></InputText>
        </div>
    </div>

    <div class="form-group row">
        <lable for="ImportedTime" class="col-sm-2 col-form-label font-weight-bold text-primary">
            Imported Time
        </lable>
        <div class="col-sm-4">
            <InputDate id="ImportedTime" class="form-control" readonly=@IsEdit placeholder="Imported Time" @bind-Value="@ViewModel.ImportedTime"></InputDate>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Save</button>
</EditForm>

@using mhcb.Syd.Models;
@using mhcb.Syd.DataAccess.Models.GUIDE;
@inject IJSRuntime jsRuntime;

@code {
    //public static readonly string[] rateDuritions =
    //            new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
    public string[] bitRateDuritions { get; set; }
    public BisRateDurationUnit[] bisRateDuritionUnit { get; set; }
    public RateCcy[] rateCcy { get; set; }


    // Note: Parameter value is start with Upcase
    [Parameter]
    public BisRateViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback<BisRateViewModel> CallBackOnSave { get; set; }

    [Parameter]
    public EventCallback<BisRateViewModel> CallBackOnError { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    protected override void OnInitialized()
    {
        //Console.WriteLine("BIS rate OnInitializedAsync ");
        //bitRateDuritions = new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("BIS rate OnParametersSetAsync");
        bitRateDuritions = new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
        bisRateDuritionUnit = (BisRateDurationUnit[])Enum.GetValues(typeof(BisRateDurationUnit));
        rateCcy = (RateCcy[])Enum.GetValues(typeof(RateCcy));

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        // this is not right code here for testing
        //Console.WriteLine("BIS rate OnAfterRenderAsync - firstRender " + firstRender);
        //bitRateDuritions = new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
        await base.OnAfterRenderAsync(firstRender);
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if (rateDuritions == null)
    //    {
    //        rateDuritions = await jsRuntime.InvokeAsync<string[]>("getRateDurition");
    //        StateHasChanged();
    //    }
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender && rateDuritions == null)
    //    {
    //        rateDuritions = await jsRuntime.InvokeAsync<string[]>("getRateDurition");
    //        StateHasChanged();
    //    }
    //}

    private void Save()
    {
        CallBackOnSave.InvokeAsync(ViewModel);
    }

    private void Error()
    {
        CallBackOnError.InvokeAsync(ViewModel);
    }
}
