@page "/UpdateFXDelivery"
@* @inherits UpdateFXDeliveryBase *@

@attribute [Authorize(Roles = "FX-Delivery - Author")]
@*<body style="padding-top:20px">*@
<div class="container-fluid">
	<div class="card">
		@*Section 1 - Title *@
		<div class="card bg-primary text-white">
			<div class="card-header">
				<h4>Send FX Settlement To Finalized Status</h4>
			</div>
		</div>

		@*Section 2 - Edit form*@
		<div class="card-body">

			@*Section 4 - Update Form*@
			<div class="row ">
				<div class="col-sm-4">
					<EditForm Model="@UpdateStatus" OnValidSubmit="Confirmed">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<table class="table table-sm table-bordered table-primary Col-Head-Left">
							<tbody>
								<tr>
									<td>
										<label for="Id" class="col-form-label">GBASE Ref No</label>
									</td>
									<td>
										<InputText id="refNo" @bind-Value="UpdateStatus.RefNo" class="form-control" placeholder="Gbase Reference No" />
										<ValidationMessage For="@(()=>UpdateStatus.RefNo)" />
									</td>
								</tr>
								<tr>
									<td>
										<label for="Id" class="col-form-label">Authorized By</label>
									</td>
									<td>
										<InputText id="authorizeBy" @bind-Value="UpdateStatus.AuthorizeBy" class="form-control" disabled />
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Status</label></td>
									<td>
										<InputText id="status" @bind-Value="UpdateStatus.Status" class="form-control" disabled />
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Deletion Status</label></td>
									<td>
										<InputSelect @bind-Value="UpdateStatus.DeletionStatus" class="form-control form-select-sm" @onclick="SetGipStatus">
											<option value="">N/A - Upload</option>
											<option value="D">D - Deletion</option>
										</InputSelect>
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">GIP Status</label></td>
									<td>
										<InputSelect @bind-Value="UpdateStatus.GipStatus" class="form-control form-select-sm" disabled>
											<option value="15">15 - Upload</option>
											<option value="8">8 - Deletion</option>
										</InputSelect>
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">GIP Description</label></td>
									<td>
										<InputText id="gipDescription" @bind-Value="UpdateStatus.GipDescription" class="form-control" disabled />
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Tran No</label></td>
									<td>
										<InputText id="tranNo" @bind-Value="UpdateStatus.TranNo" class="form-control" placeholder="Transaction No" />
										<ValidationMessage For="@(()=>UpdateStatus.TranNo)" />
									</td>
								</tr>
							</tbody>
						</table>
						<div class="well">
							<button class="btn btn-outline-primary m-1 float-left " type="submit">Set to finalized status</button>
						</div>
					</EditForm>
					<div class="well">
						<button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
					</div>
				</div>
			</div>
		</div>

		@*Section 2 - Search*@
		<div class="card-body">

			@*Section 2 - Parameters*@
			<div class="row">
				<div class="col-sm-4">
					<div class="well">
						<button class="btn btn-outline-primary m-1 float-left" @onclick="(()=>SearchClick())">Get Pending Delivery</button>
					</div>
				</div>
			</div>

			@if (modelView == null)
			{
				<div class="spinner"></div>
			}
			else
			{
				<div class="row">
					<div class="col-sm-12">
						<div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="height:200px;">
							@*Section 4 - list via TableTemplate*@
							<TableTemplate Items="modelView.ToList()">
								<TableHeader>
									<th>REF NO</th>
									<th>CUST ABBR</th>
									<th>REC SETTL CODE</th>
									<th>REC CUST ABBR</th>
									<th>REC CCY CD</th>
									<th>PAY SETTL CODE</th>
									<th>PAY CUST ABBR</th>
									<th>PAY CCY CD</th>
									<th>Status</th>
									<th>Deletion Status</th>
									<th>GIP Status</th>
									<th>GIP Description</th>
									<th>AUTHORIZE BY</th>
									<th>TRAN NO</th>
								</TableHeader>
								<RowTemplate Context="item">
									<td>@item.REF_NO</td>
									<td>@item.CUST_ABBR</td>
									<td>@item.REC_SETTL_CODE</td>
									<td>@item.REC_CUST_ABBR</td>
									<td>@item.REC_CCY_CD</td>

									<td>@item.PAY_SETTL_CODE</td>
									<td>@item.PAY_CUST_ABBR</td>
									<td>@item.PAY_CCY_CD</td>

									<td>@item.STATUS</td>
									<td>@item.DELETION_STATUS</td>
									<td>@item.GIP_STATUS</td>
									<td>@item.GIP_DESCRIPTION</td>
									<td>@item.AUTHORIZE_BY</td>
									<td>@item.TRAN_NO</td>
								</RowTemplate>
								<TableFooter>
									<th>REF NO</th>
									<th>CUST ABBR</th>
									<th>REC SETTL CODE</th>
									<th>REC CUST ABBR</th>
									<th>REC CCY CD</th>
									<th>PAY SETTL CODE</th>
									<th>PAY CUST ABBR</th>
									<th>PAY CCY CD</th>
									<th>Status</th>
									<th>Deletion Status</th>
									<th>GIP Status</th>
									<th>GIP Description</th>
									<th>AUTHORIZE BY</th>
									<th>TRAN NO</th>
								</TableFooter>
							</TableTemplate>
						</div>
					</div>
				</div>								
			}
		</div>


		@*Section 3 - list display*@
		<div class="card-footer">
			@*Section 5 - Notes *@
			<div class="row ">
				<div class="col-sm-6">
					<div class="panel" style="color: red; border-color: #ffffff; ">
						<div class="panel-body">
							<ul>
								<li>The only <b>pending</b> status can be sent to finalized status.</li>
								<li>You must be the last <b>authorizer</b> of the transaction.</li>
								<li>No GIP will be generated to the operation, so no GBASE data will be updated.</li>
								<li>The execution can be tracked in our audit log table.</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<ConfirmationBox Title="@Title"
					 Message="@Message"
					 YesButtonText="@YesButtonText"
					 NoButtonText="@NoButtonText"
					 InfoButtonText="@InfoButtonText"
					 BtnClass="@BtnClass"
					 ConfirmationChanged="Save"  
					 InformationChanged="OkClick"
					 IsVisible="IsVisible"
					 IsInformationOnly="IsInformationOnly">
	</ConfirmationBox>
</div>


@inject IFXDeliveryHttpService _httpServiceRole;
@inject IJSRuntime IJSRuntime;
@inject IHttpContextAccessor _httpContext;
@inject NavigationManager NavigationManager;
@inject IWebHostEnvironment Env;
@inject IJwtToken jwtToken ;

@code {

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	public IEnumerable<FXDeliveryView> modelView { get; set; } = new List<FXDeliveryView>();

	public InputFXTrans UpdateStatus;

	// ** Variables for confirmation box
	public string Title { get; set; }
	public string Message { get; set; }
	public string YesButtonText { get; set; }
	public string NoButtonText { get; set; }
	public string InfoButtonText { get; set; }
	public bool IsVisible { get; set; }
	public bool IsInformationOnly { get; set; }
	public string BtnClass { get; set; }
	// ** End
	protected override async Task OnInitializedAsync()
	{
		Title = "FX Delivery";
		Message = "Do you want to save?";
		YesButtonText = "Yes";
		NoButtonText = "No";
		InfoButtonText = "OK";
		BtnClass = "btn btn-primary float-left";

		UpdateStatus = new InputFXTrans()
			{
				RefNo = "",
				AuthorizeBy = "",
				Status = "F",
				DeletionStatus = "",
				GipDescription = "Approved",
				GipStatus = "15",
				TranNo = ""
			};

		var authenticationState = await authenticationStateTask;
		var user = authenticationState?.User;
		if (user is not null)
		{
			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UpdateStatus.AuthorizeBy = authenticationState.User.Identity.Name.ToUpper();
			}
		}
		//return base.OnInitializedAsync();
	}

	protected async Task SearchClick()
	{
		modelView = null;
		modelView = (await _httpServiceRole.GetPendingFxDelivery()).ToList();

		// I can't find the reason this new code does not work
		//modelView = (await _httpService.GetAllAsync($"api/FXDeliverys/GetPendingFxDelivery", null)).ToList();

		if (modelView.Count() == 0)
		{
			IsVisible = true;
			IsInformationOnly = true;
			Message = "No pending FX delivery records found.";
			//ConfirmationComponent.Show();
		}
	}

	// ** Add for confirmation box
	protected async Task Confirmed()
	{
		Message = "Do you want to save?";
		IsVisible = true;
		IsInformationOnly = false;

		StateHasChanged();

		await Task.FromResult(true);
	}

	protected async Task Save(bool IsSave)
	{
		if (IsSave)
		{
			//var claims = new[] {
			//                 new Claim(ClaimTypes.Role, "FX-Delivery - Author")
			//             };
			//var roleToken = jwtToken.GenerateJwtTokenByClaims(claims);
			var result = await _httpServiceRole.UpdateStatus(UpdateStatus);

			switch (result)
			{
				case 200:

					Message = "Saved Successfully.";
					IsInformationOnly = true;
					IsVisible = true;

					await SearchClick();
					break;
				case 404:

					Message = "Unsuccessfully saved.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				case 401:

					Message = "Bad internet request.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				default:

					Message = "Error retrieving data from the database.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
			}
		}
		else
		{
			IsVisible = false;
		}
		StateHasChanged();
	}

	protected void OkClick() => IsVisible = false;
	protected void SetGipStatus()
	{
		if (UpdateStatus.DeletionStatus == "D")
		{
			UpdateStatus.GipStatus = "8";
		}
		else
		{
			UpdateStatus.GipStatus = "15";
		}
	}

	protected void BackClick() => NavigationManager.NavigateTo($"/GUIDE");

}
