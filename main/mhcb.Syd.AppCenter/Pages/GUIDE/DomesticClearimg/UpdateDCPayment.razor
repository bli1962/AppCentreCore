@page "/UpdateDCPayment"
@attribute [Authorize(Roles ="Domestic Clearing Au")]

<div class="container-fluid">

    <div class="card">
        @*Section 1 - Title *@
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h4>Update Domestic Clearing Payment Transaction Status</h4>
            </div>
        </div>

        @*Section 2 - Edit form*@
        <div class="card-body">
            @*Section 4 - Update Form*@
            <div class="row ">
                <div class="col-sm-4">
                    <EditForm Model="@UpdateStatus" OnValidSubmit="Confirmed">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <table class="table table-sm table-bordered table-primary Col-Head-Left">
                            <tbody>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Payment Id</label></td>
                                    <td>
                                        <InputNumber id="PaymentId" @bind-Value="UpdateStatus.PaymentId"
                                                     class="form-control" placeholder="Payment Id" />
                                        <ValidationMessage For="@(()=>UpdateStatus.PaymentId)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Status Id</label></td>
                                    <td>
                                        <InputSelect @bind-Value="UpdateStatus.StatusId" class="form-control form-select-sm">
                                            <option value="1">1.Imported</option>
                                            <option value="2">2.Validated</option>
                                            <option value="3">3.GO Posted</option>
                                            <option value="4">4.Exported</option>
                                            <option value="5">5.Completed</option>
                                            <option value="6">6.Returned</option>
                                            <option value="8">8.Error</option>
                                            <option value="9">9.Deleted</option>
                                            <option value="10">10.Fee Calculated</option>
                                            <option value="22">22.Authorise Pending</option>
                                            <option value="24">24.Authorise Deletion</option>
                                            <option value="28">28.Authorise Cancel</option>
                                            <option value="29">29.Authorise Sent Manually</option>
                                            <option value="31">31.Sent Manually</option>
                                            <option value="32">32.Cancelled</option>
                                            <option value="33">33.Return Completed</option>
                                            <option value="34">34.Fee Error</option>
                                            <option value="36">36.Verify</option>
                                            <option value="37">37.Authorise Return</option>
                                            <option value="38">38.PreError</option>
                                            <option value="39">39.Acknowledge</option>
                                            <option value="40">40.Authorise Acknowledge</option>
                                            <option value="41">41.Acknowledge Completed</option>
                                        </InputSelect>
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Comment</label></td>
                                    <td>
                                        <InputText id="Comment" @bind-Value="UpdateStatus.Comment"
                                                   class="form-control" placeholder="Your comments" />
                                        <ValidationMessage For="@(()=>UpdateStatus.Comment)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Operated By</label></td>
                                    <td><InputText id="authorizeBy" @bind-Value="UpdateStatus.AuthorizeBy" class="form-control-sm" disabled /></td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="well">
                            <button class="btn btn-outline-primary m-1 float-left " type="submit">Change Domestic Clearing Status</button>
                        </div>
                    </EditForm>
                    <div class="well">
                        <button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
                    </div>
                </div>
            </div>
        </div>

       
        <div class="card-body">
            @*Section 2 - Parameters*@
            <div class="row">
                <div class="col-sm-4">
                    <table class="table table-sm table-bordered table-primary Col-Head-Left">
                        <tbody thead class="thead-light">
                            <tr>
                                <td><label for="Id" class="col-form-label">Date type</label></td>
                                <td>
                                    <select class="form-control form-select-sm" @bind="SelectedDateType">
                                        <option value="ValueDate">Value Date</option>
                                        <option value="ProcessedDate">Process Date</option>
                                        <option value="UpdatedDate">Update Date</option>
                                        <option value="CreatedDate">Create Date</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td><label for="Id" class="col-form-label">Date Value</label></td>
                                <td>
                                    <input type="date" class="form-control" @bind="SelectedOptDate" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="well">
                        <button class="btn btn-outline-primary m-1 float-left" @onclick="(()=>SearchClick())">Get DC Payment Transaction</button>
                    </div>
                </div>
            </div>
            @if (modelView == null)
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="height:400px;">
                            @*Section 4 - list via TableTemplate*@
                            <TableTemplate Items="modelView.ToList()">
                                <TableHeader>
                                    <th>Payment Id</th>
                                    <th>Value Date</th>
                                    <th>Total Amount</th>
                                    <th>Currency Code</th>
                                    <th>Current Account</th>
                                    <th>Abbreviation</th>
                                    <th>Account Name</th>
                                    <th>Status Id</th>
                                    <th>Process Date</th>
                                    <th>Updated When</th>
                                    <th>Updated Who</th>
                                    <th>Created When</th>
                                </TableHeader>
                                <RowTemplate Context="item">
                                    <td>@item.PaymentId</td>
                                    <td>@item.ValueDate.ToString("dd/MM/yyyy")</td>
                                    <td>@item.TotalAmount.ToString("0,0.00")</td>
                                    <td>@item.CurrencyCode</td>
                                    <td>@item.CustomerCurrentAccount</td>
                                    <td>@item.CustomerAbbreviation</td>
                                    <td>@item.AccountName</td>
                                    <td>@item.StatusId</td>

                                    <td>@item.ProcessDate.ToString("dd/MM/yyyy")</td>
                                    <td>@item.UpdatedWhen.ToString("dd/MM/yyyy")</td>
                                    <td>@item.UpdatedWho</td>
                                    <td>@item.CreatedWhen.ToString("dd/MM/yyyy")</td>
                                </RowTemplate>
                                <TableFooter>
                                    <th>Payment Id</th>
                                    <th>Value Date</th>
                                    <th>Total Amount</th>
                                    <th>Currency Code</th>
                                    <th>Current Account</th>
                                    <th>Abbreviation</th>
                                    <th>Account Name</th>
                                    <th>Status Id</th>
                                    <th>Process Date</th>
                                    <th>Updated When</th>
                                    <th>Updated Who</th>
                                    <th>Created When</th>
                                </TableFooter>
                            </TableTemplate>
                        </div>
                    </div>
                </div>               
            }
        </div>    
    </div>

    <ConfirmationBox Title="@Title"
                     Message="@Message"
                     YesButtonText="@YesButtonText"
                     NoButtonText="@NoButtonText"
                     InfoButtonText="@InfoButtonText"
                     BtnClass="@BtnClass"
                     ConfirmationChanged="Save"  
                     InformationChanged="OkClick"
                     IsVisible="IsVisible"
                     IsInformationOnly="IsInformationOnly">
    </ConfirmationBox>
</div>



@inject IDomesticClearingHttpService _httpServiceRole;
@inject IHttpService<DomesticClearingPaymentView> _httpService;
@inject IJSRuntime IJSRuntime;
@inject IHttpContextAccessor _httpContext;
@inject NavigationManager NavigationManager;
@inject IJwtToken jwtToken;

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public IEnumerable<DomesticClearingPaymentView> modelView { get; set; } = new List<DomesticClearingPaymentView>();

    public DomesticClearingAttribute UpdateStatus;

    public DateTime SelectedOptDate { get; set; } = DateTime.Today;
    public string SelectedDateType { get; set; } = "ValueDate";

    // ** Variables for confirmation box
    public string Title { get; set; }
    public string Message { get; set; }
    public string YesButtonText { get; set; }
    public string NoButtonText { get; set; }
    public string InfoButtonText { get; set; }
    public bool IsVisible { get; set; }
    public bool IsInformationOnly { get; set; }
    public string BtnClass { get; set; }
    // ** End

    protected override async Task OnInitializedAsync()
    {
        Title = "Domestic Clearing";
        Message = "Do you want to save?";
        YesButtonText = "Yes";
        NoButtonText = "No";
        InfoButtonText = "OK";
        BtnClass = "btn btn-primary float-left";

        UpdateStatus = new()
            {
                PaymentId = 0,
                Comment = "",
                StatusId = 33,
                AuthorizeBy = "",
            };

        var authenticationState = await authenticationStateTask;
        var user = authenticationState?.User;
        if (user is not null)
        {
            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                UpdateStatus.AuthorizeBy = authenticationState.User.Identity.Name.ToUpper();
            }
        }
        //return base.OnInitializedAsync();
    }

    protected async Task SearchClick()
    {
        modelView = null;
        string dateValue = SelectedOptDate.ToString("yyyy-MM-dd");
        string dateType = SelectedDateType;
        modelView = (await _httpService.GetAllAsync($"api/DomesticClearings/GetDCPaymentByDate/{dateValue}/{dateType}", null)).ToList();

        if (modelView.Count() == 0)
        {
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No Domestic Clearing records found.";
            //ConfirmationComponent.Show();
        }
    }

    // ** Add for confirmation box
    protected async Task Confirmed()
    {
        Message = "Do you want to save?";
        IsVisible = true;
        IsInformationOnly = false;

        StateHasChanged();

        await Task.FromResult(true);
    }

    protected async Task Save(bool IsSave)
    {
        if (IsSave)
        {
            //if ((UpdateStatus.PaymentId < 1)) return;
            //var claims = new[] {
            //        new Claim(ClaimTypes.Role, "Domestic Clearing Au")
            //    };
            //var roleToken = jwtToken.GenerateJwtTokenByClaims(claims);

            var result = await _httpServiceRole.UpdateStatus(UpdateStatus);

            switch (result)
            {
                case 200:

                    Message = "Saved Successfully.";
                    IsInformationOnly = true;
                    IsVisible = true;

                    await SearchClick();
                    break;
                case 404:

                    Message = "Unsuccessfully saved.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                case 401:

                    Message = "Bad internet request.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                default:

                    Message = "Error retrieving data from the database.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
            }
        }
        else
        {
            IsVisible = false;
        }
        StateHasChanged();
    }
    protected void OkClick() => IsVisible = false;

    protected void BackClick() => NavigationManager.NavigateTo($"/PaymentControl");

}


