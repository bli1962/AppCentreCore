@page "/UpdateFXTransactionExt"
@attribute [Authorize(Roles = "FX-Trans - Authorise")]


<div class="container-fluid">
	<div class="card">
		@*Section 1 - Title *@
		<div class="card bg-primary text-white">
			<div class="card-header">
				<h4>Reupload FX Transaction GID</h4>
			</div>
		</div>

		@*Section 2 - Edit form*@
		<div class="card-body">
			@*Section 4 - Update Form*@
			<div class="row ">
				<div class="col-sm-4">
					<EditForm Model="@UpdateStatus" OnValidSubmit="Confirmed">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<table class="table table-sm table-bordered table-primary Col-Head-Left">
							<tbody>
								<tr>
									<td><label for="Id" class="col-form-label">GBASE Ref No</label></td>
									<td>
										<InputText id="RefNo" @bind-Value="UpdateStatus.RefNo" class="form-control" placeholder="Gbase Ref No" />
										<ValidationMessage For="@(() => UpdateStatus.RefNo)" />
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Operation Date</label></td>
									<td>
										<InputDate id="optDate" @bind-Value="UpdateStatus.optDate" class="form-control" placeholder="Operation Date" />
										<ValidationMessage For="@(() => UpdateStatus.optDate)" />
									</td>
								</tr>
								<tr>
									<td><label for="operator" class="col-form-label">Operated By</label></td>
									<td>
										<InputText id="AuthorizeBy" @bind-Value="UpdateStatus.AuthorizeBy" class="form-control" disabled />
									</td>
								</tr>
							</tbody>
						</table>

						<div class="well">
							<button class="btn btn-outline-primary m-1 float-left " type="submit">Upload GID</button>
						</div>
					</EditForm>
					<div class="well">
						<button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
					</div>
				</div>
			</div>
		</div>

		@*Section 2 - Search*@
		<div class="card-body">
			@*Section 2 - Parameters*@
			<div class="row">
				<div class="col-sm-4">
					<div class="well">
						<button class="btn btn-outline-primary m-1 float-left " @onclick="(()=>SearchClick())">Get Today's GID of FX Transaction</button>
					</div>
				</div>
			</div>
			@if (modelView == null)
			{
				<div class="spinner"></div>
			}
			else
			{

				<div class="row">
					<div class="col-sm-12">
						<div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="height:600px;">
							@*Section 4 - list via TableTemplate*@
							<TableTemplate Items="modelView.ToList()">
								<TableHeader>
									<th>Ref No</th>
									<th>Contract Id</th>
									<th>Trade Id</th>
									<th>Event</th>
									<th>Portfolio Group</th>
									<th>Portfolio Desk</th>
									<th>Portfolio Book</th>
									<th>Dealer</th>
									<th>Contract CCY</th>
									<th>EQUIV CCY</th>
									<th>Printed</th>
									<th>DateTime</th>
									<th>GID Upload</th>
								</TableHeader>
								<RowTemplate Context="item">
									<td>@item.REF_NO</td>
									<td>@item.ContractId</td>
									<td>@item.TradeId</td>
									<td>@item.Event</td>
									<td>@item.PortfolioGroup</td>
									<td>@item.PortfolioDesk</td>
									<td>@item.PortfolioBook</td>
									<td>@item.AuthorisedDealer</td>
									<td>@item.CONTRACT_CCY_ABBR_ORIG</td>
									<td>@item.EQUIV_CCY_ABBR_ORIG</td>
									<td>@item.Printed</td>
									<td>@item.PrintDateTime.ToString("dd/MM/yyyy")</td>
									<td>@item.GIDUpload</td>
								</RowTemplate>
								<TableFooter>
									<th>Ref No</th>
									<th>Contract Id</th>
									<th>Trade Id</th>
									<th>Event</th>
									<th>Portfolio Group</th>
									<th>Portfolio Desk</th>
									<th>Portfolio Book</th>
									<th>Dealer</th>
									<th>Contract CCY</th>
									<th>EQUIV CCY</th>
									<th>Printed</th>
									<th>DateTime</th>
									<th>GID Upload</th>
								</TableFooter>
							</TableTemplate>
						</div>
					</div>
				</div>			
			}
		</div>

		@*Section 3 - list display*@
		<div class="card-footer">
		</div>
	</div>

	<ConfirmationBox Title="@Title"
					 Message="@Message"
					 YesButtonText="@YesButtonText"
					 NoButtonText="@NoButtonText"
					 InfoButtonText="@InfoButtonText"
					 BtnClass="@BtnClass"
					 ConfirmationChanged="Save"  
					 InformationChanged="OkClick"
					 IsVisible="IsVisible"
					 IsInformationOnly="IsInformationOnly">
	</ConfirmationBox>
</div>



@inject IFXTransactionExtHttpService _httpServiceRole ;
@inject IHttpService<FXTransactionExtView> _httpService ;
@inject IJSRuntime IJSRuntime ;
@inject IHttpContextAccessor _httpContext ;
@inject NavigationManager NavigationManager ;
@inject IWebHostEnvironment Env ;
@inject IJwtToken jwtToken ;

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	public IEnumerable<FXTransactionExtView> modelView { get; set; } = new List<FXTransactionExtView>();

	public InputFXGID UpdateStatus;

	// ** Variables for confirmation box
	public string Title { get; set; }
	public string Message { get; set; }
	public string YesButtonText { get; set; }
	public string NoButtonText { get; set; }
	public string InfoButtonText { get; set; }
	public bool IsVisible { get; set; }
	public bool IsInformationOnly { get; set; }
	public string BtnClass { get; set; }
	// ** End
	protected override async Task OnInitializedAsync()
	{
		Title = "FX Transaction GID";
		Message = "Do you want to save?";
		YesButtonText = "Yes";
		NoButtonText = "No";
		InfoButtonText = "OK";
		BtnClass = "btn btn-primary float-left";

		UpdateStatus = new()
			{
				RefNo = "",
				optDate = DateTime.Today,
				AuthorizeBy = "",
			};

		var authenticationState = await authenticationStateTask;
		var user = authenticationState?.User;
		if (user is not null)
		{
			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UpdateStatus.AuthorizeBy = authenticationState.User.Identity.Name.ToUpper();
			}
		}
		//return base.OnInitializedAsync()
	}

	protected async Task SearchClick()
	{
		modelView = null;
		//modelView = (await _httpService2.GetFXGID()).ToList();
		modelView = (await _httpService.GetAllAsync($"api/FXTransactionExts/GetFXGID", null)).ToList();

		if (modelView.Count() == 0)
		{
			IsVisible = true;
			IsInformationOnly = true;
			Message = "No FX GID records found.";
			//ConfirmationComponent.Show();
		}
	}

	// ** Add for confirmation box
	protected async Task Confirmed()
	{
		Message = "Do you want to save?";
		IsVisible = true;
		IsInformationOnly = false;
		StateHasChanged();

		await Task.FromResult(true);
	}

	protected async Task Save(bool IsSave)
	{
		if (IsSave)
		{
			//var claims = new[] {
			//			  new Claim(ClaimTypes.Role, "FX-Trans - Authorise")
			//		  };
			//var roleToken = jwtToken.GenerateJwtTokenByClaims(claims);

			var result = await _httpServiceRole.UpdateStatus(UpdateStatus);

			switch (result)
			{
				case 200:

					Message = "Saved Successfully.";
					IsInformationOnly = true;
					IsVisible = true;

					await SearchClick();
					break;
				case 404:

					Message = "Unsuccessfully saved.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				case 401:

					Message = "Bad internet request.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				default:

					Message = "Error retrieving data from the database.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
			}
		}
		else
		{
			IsVisible = false;
		}
		StateHasChanged();


	}
	protected void OkClick() => IsVisible = false;
	protected void BackClick() => NavigationManager.NavigateTo($"/GUIDE");

}