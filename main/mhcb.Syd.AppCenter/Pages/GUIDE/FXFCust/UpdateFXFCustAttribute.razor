@page "/UpdateFXFCustAttribute"
@attribute [Authorize(Roles = "Customer - Authorise")]

<div class="container-fluid">

	<div class="card">
		@*Section 1 - Title *@
		<div class="card bg-primary text-white">
			<div class="card-header">
				<h4>Update Customer Attributes - Tax code, Dept code and Status</h4>
			</div>
		</div>

		@*Section 2 - Edit form*@
		<div class="card-body">
			@*Section 4 - Update Form*@
			<div class="row ">
				<div class="col-sm-4">

					<EditForm Model="@UpdateStatus" OnValidSubmit="Confirmed">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<table class="table table-sm table-bordered table-primary Col-Head-Left">
							<tbody>
								<tr>
									<td><label for="Id" class="col-form-label">Customer Abbreviation</label></td>
									<td><InputText id="custAbbr" @bind-Value="UpdateStatus.Abbreviation" class="form-control" placeholder="Customer Abbrivation" /></td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Status</label></td>
									<td>
										<InputSelect @bind-Value="UpdateStatus.Status" class="form-control form-select-sm">
											<option value="F">Finalized</option>
											<option value="A">To be Authorized</option>
											<option value="V">Verified</option>
											<option value="D">Deleted</option>
										</InputSelect>
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">TAX Code</label></td>
									<td>
										<InputSelect @bind-Value="UpdateStatus.TaxCode" class="form-control form-select-sm">
											<option value="NA">No change</option>
											<option value="01">01</option>
											<option value="02">02</option>
											<option value="03">03</option>
											<option value="04">04</option>
											<option value="">Empty</option>
										</InputSelect>
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Department Code</label></td>
									<td>
										<InputSelect @bind-Value="UpdateStatus.DeptCode" class="form-control form-select-sm">
											<option value="NA">No Change</option>
											<option value="20">20</option>
											<option value="30">30</option>
											<option value="31">31</option>
											<option value="32">32</option>
											<option value="40">40</option>
											<option value="50">50</option>
											<option value="70">70</option>
											<option value="90">90</option>
											<option value="">Empty</option>
										</InputSelect>
									</td>
								</tr>
								<tr>
									<td><label for="Id" class="col-form-label">Authorized By</label></td>
									<td><InputText id="authorizeBy" @bind-Value="UpdateStatus.AuthorizeBy" class="form-control" readonly /></td>
								</tr>
							</tbody>
						</table>
						<div class="well">
							<button class="btn btn-outline-primary m-1 float-left" type="submit">Update attributes</button>
						</div>
					</EditForm>
					<div class="well">
						<button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
					</div>
				</div>
			</div>
		</div>

		@*Section 3 - list display*@
		<div class="card-footer">
			@*Section 5 - Notes *@
			<div class="row ">
				<div class="col-sm-6">
					<div class="panel" style="color: red; border-color: #ffffff; ">
						<div class="panel-body">
							<ul>
								<li>The only <b>pending</b> status can be sent to finalized status.</li>
								<li>You must be the last <b>authorizer</b> of the transaction.</li>
								<li>No GIP will be generated to the operation, so no GBASE data will be updated.</li>
								<li>The execution can be tracked in our audit log table.</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<ConfirmationBox Title="@Title"
					 Message="@Message"
					 YesButtonText="@YesButtonText"
					 NoButtonText="@NoButtonText"
					 InfoButtonText="@InfoButtonText"
					 BtnClass="@BtnClass"
					 ConfirmationChanged="Save"  
					 InformationChanged="OkClick"
					 IsVisible="IsVisible"
					 IsInformationOnly="IsInformationOnly">
	</ConfirmationBox>
</div>


@inject IFXFCustHttpService _httpServiceRole;
@inject IJSRuntime IJSRuntime;
@inject IHttpContextAccessor _httpContext;
@inject NavigationManager NavigationManager;
@inject IWebHostEnvironment Env;
@inject IJwtToken jwtToken;


@code {

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	//public IEnumerable<FXFCustomerView> modelView { get; set; } = new List<FXFCustomerView>();
	public InputFXFCustomer UpdateStatus;

	// ** Variables for confirmation box
	public string Title { get; set; }
	public string Message { get; set; }
	public string YesButtonText { get; set; }
	public string NoButtonText { get; set; }
	public string InfoButtonText { get; set; }
	public bool IsVisible { get; set; }
	public bool IsInformationOnly { get; set; }
	public string BtnClass { get; set; }
	// ** End

	protected override async Task OnInitializedAsync()
	{
		Title = "FX Customer";
		Message = "Do you want to save?";
		YesButtonText = "Yes";
		NoButtonText = "No";
		InfoButtonText = "OK";
		BtnClass = "btn btn-primary float-left";

		UpdateStatus = new InputFXFCustomer()
			{
				Abbreviation = "",
				DeptCode = "NA",
				TaxCode = "NA",
				Status = "F",
				AuthorizeBy = ""
			};

		var authenticationState = await authenticationStateTask;
		var user = authenticationState?.User;
		if (user is not null)
		{
			if (user.Identity is not null && user.Identity.IsAuthenticated)
			{
				UpdateStatus.AuthorizeBy = authenticationState.User.Identity.Name.ToUpper();
			}
		}
		//return base.OnInitializedAsync();
	}

	// ** Add for confirmation box
	protected async Task Confirmed()
	{
		Message = "Do you want to save?";
		IsVisible = true;
		IsInformationOnly = false;
		StateHasChanged();

		await Task.FromResult(true);
	}

	protected async Task Save(bool IsSave)
	{
		if (IsSave)
		{
			//var claims = new[] {
			//			  new Claim(ClaimTypes.Role, "Customer - Authorise")
			//		  };
			//var roleToken = jwtToken.GenerateJwtTokenByClaims(claims);
			var result = await _httpServiceRole.UpdateStatus(UpdateStatus); ;

			switch (result)
			{
				case 200:

					Message = "Saved Successfully.";
					IsInformationOnly = true;
					IsVisible = true;

					break;
				case 404:

					Message = "Unsuccessfully saved.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				case 401:

					Message = "Bad internet request.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
				default:

					Message = "Error retrieving data from the database.";
					IsInformationOnly = true;
					IsVisible = true;
					break;
			}
		}
		else
		{
			IsVisible = false;
		}
		StateHasChanged();


	}
	protected void OkClick() => IsVisible = false;
	protected void BackClick() => NavigationManager.NavigateTo($"/GUIDE");


}