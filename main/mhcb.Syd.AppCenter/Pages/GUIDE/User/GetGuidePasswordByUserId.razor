@page "/GetGuidePasswordByUserId"
@attribute [Authorize]


<div class="container-fluid">

    <div class="card">
        @*Section 1 - Title *@
        <div class="card bg-primary text-white">
            <div class="card-header">
                <div class="row ">
                    <h4>Forget GUIDE password?</h4>
                </div>
            </div>
        </div>

        @*Section 2 - Parameters*@
        <div class="card-body">

            <div class="col-sm-4">
                <EditForm Model="@inputModel" OnValidSubmit="@SubmitClick">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <table class="table table-sm table-bordered table-primary Col-Head-Left">
                            <tbody thead class="thead-light">
                                <tr>
                                    <td><label for="Id" class="col-form-label">Your email</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Email address" @bind-Value="inputModel.Email" disabled />
                                        <ValidationMessage For="@(() => inputModel.Email)" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="row">
                        <div class="well">
                            <button class="btn btn-outline-primary m-1 float-left btn-width-180" type="submit">Send me password</button>
                            <button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <ConfirmationBox Title="@Title"
                     Message="@Message"
                     YesButtonText="@YesButtonText"
                     NoButtonText="@NoButtonText"
                     InfoButtonText="@InfoButtonText"
                     BtnClass="@BtnClass"
                     ConfirmationChanged="Save"  
                     InformationChanged="OkClick"
                     IsVisible="IsVisible"
                     IsInformationOnly="IsInformationOnly">
    </ConfirmationBox>
</div>


@inject IHttpService<UserView> _httpService ;
@inject IEmailSender _emailSender ;
@inject IAccountHttpService _accountHttpService ;
@inject IJSRuntime IJSRuntime ;
@inject NavigationManager navigationManager ;


 @code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

   
    public IEnumerable<UserView> modelView { get; set; } = new List<UserView>();

    // ** Variables for confirmation box
    public string Title { get; set; }
    public string Message { get; set; }
    public string YesButtonText { get; set; }
    public string NoButtonText { get; set; }
    public string InfoButtonText { get; set; }
    public bool IsVisible { get; set; }
    public bool IsInformationOnly { get; set; }
    public string BtnClass { get; set; }
    // ** End


    protected InputModel inputModel = new()
        {
            Email = "",
        };

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Title = "Forgot GUIDE password";
        Message = "Do you want to save?";
        YesButtonText = "Yes";
        NoButtonText = "No";
        InfoButtonText = "OK";
        BtnClass = "btn btn-primary float-left";

        var authenticationState = await authenticationStateTask;
        //var user = await _userManager.FindByNameAsync(authenticationState.User.Identity.Name);
        var user = await _accountHttpService.FindByNameAsync(authenticationState.User.Identity.Name);

        if (user == null)
        {
            // Don't reveal that the user does not exist or email does not belong to login user
            //ConfirmationComponent.Show();
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No records found.";
        }
        else
        {
            inputModel.Email = user.Email.ToLower();
        }
    }
    protected void Save(bool IsSave) { IsVisible = IsSave; }
    protected void OkClick() => IsVisible = false;

    protected async Task SubmitClick()
    {
        var authenticationState = await authenticationStateTask;

        //var user = await _userManager.FindByEmailAsync(inputModel.Email);
        var user = await _accountHttpService.FindByEmailAsync(inputModel.Email);
        var emailConfirm = await _accountHttpService.IsEmailConfirmedByEmailAsync(inputModel.Email);

        if ((user == null || !(emailConfirm)) ||
            (user.UserName.ToUpper() != authenticationState.User.Identity.Name.ToUpper()))
        {
            // Don't reveal that the user does not exist or email does not belong to login user
            //ConfirmationComponent.Show();
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No records found.";

        }
        else
        {
            string userId = authenticationState.User.Identity.Name.ToUpper();
            //modelView = await _httpService2.LoadGuidePasswordByUserId(userId);
            modelView = (await _httpService.GetAllAsync($"api/Users/GetGuidePasswordByUserId/{userId}", null)).ToList();

            string password = modelView.FirstOrDefault().PASSWORD;
            if (password != "")
            {
                try
                {
                    await _emailSender.SendEmailAsync(
                          inputModel.Email,
                          "Forgot GUIDE Password",
                          $"Your GUIDE password is " + password + ", user Id is " + user.UserName);

                }
                catch { }
                navigationManager.NavigateTo($"/GetGuidePasswordByUserIdConfirmation");
            }
        }
    }

    protected void BackClick() => navigationManager.NavigateTo($"/GUIDEUser");
 
}