@page "/FXConfirmation"

@attribute [Authorize]
<div class="container-fluid">
    <div class="card">
        @*Section 1 - Title *@
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h4>Reprint FX Confirmation</h4>
            </div>
        </div>

        @*Section 2 - Edit form*@
        <div class="card-body">
            @*Section 4 - Update Form*@
            <div class="row ">
                <div class="col-sm-4">
                    <EditForm Model="@UpdateStatus" OnValidSubmit="Confirmed">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <table class="table table-sm table-bordered table-primary Col-Head-Left">
                            <tbody>
                                <tr>
                                    <td><label for="Id" class="col-form-label">eDocument ID :</label></td>
                                    <td>
                                        <InputNumber class="form-control" placeholder="eDocument ID" @bind-Value="UpdateStatus.Id" />
                                        <ValidationMessage For="@(() => UpdateStatus.Id)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Operated By :</label></td>
                                    <td><input type="text" class="form-control" @bind="UpdateStatus.AuthorizeBy" readonly /></td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="well">
                            <button class="btn btn-outline-primary m-1 float-left" type="submit">Reprint</button>
                            <button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
                            <br />
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        @*Section 2 - Search*@
        <div class="card-body">
            @*Section 2 - Parameters*@
            <div class="row">
                <div class="col-sm-4">
                    <table class="table table-sm table-bordered table-primary Col-Head-Left">
                        <tbody thead class="thead-light">
                            <tr>
                                <td><label for="Id" class="col-form-label">Contract Date</label></td>
                                <td>
                                    <input type="date" class="form-control" @bind="SelectedOptDate" />
                                </td>
                            </tr>
                            <tr>
                                <td><label for="Id" class="col-form-label">Document type</label></td>
                                <td>
                                    <select class="form-control form-select-sm" @bind="SelectedReportType">                                     
                                        <option value="ForeignExchangeConfirmation">ForeignExchange Confirmation</option>
                                    </select>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="well">
                        <button class="btn btn-outline-primary m-1 float-left" @onclick="(()=>SearchClick())">Search Confirmation</button>
                    </div>
                </div>
            </div>
            @if (modelView == null && SelectedReportType != "")
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="height:500px;">
                            @*Section 4 - list via TableTemplate*@
                            <TableTemplate Items="modelView.ToList()">
                                <TableHeader>
                                    <th>eDocument ID</th>
                                    <th>Report Type</th>
                                    <th>Company Name</th>
                                    <th>Reference No.</th>
                                    <th>Contract Date</th>
                                    <th>Buy Amount</th>
                                    <th>Sell Amount</th>
                                    <th>FX Rate</th>
                         
                                    <th>Processed</th>
                                    <th>Date Processed</th>
                                    <th>Error</th>
                                    <th>Error Message</th>
                                </TableHeader>
                                <RowTemplate Context="item">
                                    <td>@item.Id</td>
                                    <td>@item.ReportType</td>
                                    <td>@item.CompanyName</td>
                                    <td>@item.ReferenceNumber</td>
                                    <td>@item.ContractDate</td>
                                    <td>@item.BuyAmount</td>
                                    <td>@item.SellAmount</td>
                                    <td>@item.OurPurchaseRate</td>                                
                                    <td>@item.Processed</td>
                                    <td>@item.DateProcessed.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Errored</td>
                                    <td>@item.ErrorMessage</td>
                                </RowTemplate>
                                <TableFooter>
                                    <th>eDocument ID</th>
                                    <th>Report Type</th>
                                    <th>Company Name</th>
                                    <th>Reference No.</th>
                                    <th>Contract Date</th>
                                    <th>Buy Amount</th>
                                    <th>Sell Amount</th>
                                    <th>FX Rate</th>

                                    <th>Processed</th>
                                    <th>Date Processed</th>
                                    <th>Error</th>
                                    <th>Error Message</th>
                                </TableFooter>
                            </TableTemplate>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <ConfirmationBox Title="@Title"
                     Message="@Message"
                     YesButtonText="@YesButtonText"
                     NoButtonText="@NoButtonText"
                     InfoButtonText="@InfoButtonText"
                     BtnClass="@BtnClass"
                     ConfirmationChanged="Save"
                     InformationChanged="OkClick"
                     IsVisible="IsVisible"
                     IsInformationOnly="IsInformationOnly">
    </ConfirmationBox>
</div>

@inject IEDocumentHttpService _httpServiceRole;
@inject IHttpService<FXConfirmationView> _httpService;
@inject IJSRuntime IJSRuntime;
@inject NavigationManager NavigationManager;

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public IEnumerable<FXConfirmationView> modelView { get; set; } = new List<FXConfirmationView>();
    protected InputEDocument UpdateStatus;
    public DateTime SelectedOptDate { get; set; } = DateTime.Today;
    public string SelectedReportType { get; set; } = "ForeignExchangeConfirmation";

    // ** Variables for confirmation box
    public string Title { get; set; }
    public string Message { get; set; }
    public string YesButtonText { get; set; }
    public string NoButtonText { get; set; }
    public string InfoButtonText { get; set; }
    public bool IsVisible { get; set; }
    public bool IsInformationOnly { get; set; }
    public string BtnClass { get; set; }
    // ** End
    protected override async Task OnInitializedAsync()
    {
        Title = "FX Confirmation";
        Message = "Do you want to save?";
        YesButtonText = "Yes";
        NoButtonText = "No";
        InfoButtonText = "OK";
        BtnClass = "btn btn-primary float-left";

        UpdateStatus = new()
            {
                Id = 0,
                ReportType = "ForeignExchangeConfirmation",
                AuthorizeBy = ""
            };

        var authenticationState = await authenticationStateTask;
        var user = authenticationState?.User;
        if (user is not null)
        {
            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                UpdateStatus.AuthorizeBy = authenticationState.User.Identity.Name.ToUpper();
            }
        }
        //return base.OnInitializedAsync();
    }

    protected async Task SearchClick()
    {
        modelView = null;
        string eDocType = SelectedReportType;
        string optDate = SelectedOptDate.ToString("yyyy-MM-dd");
        modelView = (await _httpService.GetAllAsync($"api/EDocuments/GetFXConfirmation/{eDocType}/{optDate}", null)).ToList();

        if (modelView.Count() == 0)
        {
            //await IJSRuntime.InvokeVoidAsync("AlertMessage", "No Bank Information Found.");
            //ConfirmationComponent.Show();
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No FX Confirmation Found.";
        }
    }
    protected void OkClick() => IsVisible = false;

    // ** Add for confirmation box
    protected async Task Confirmed()
    {
        Message = "Do you want to save?";
        IsVisible = true;
        IsInformationOnly = false;
        StateHasChanged();

        await Task.FromResult(true);
    }

    protected async Task Save(bool IsSave)
    {
        if (IsSave)
        {
            var result = await _httpServiceRole.UpdateStatus(UpdateStatus);

            switch (result)
            {
                case 200:

                    Message = "RePrint FX Confirmation Successfully.";
                    IsInformationOnly = true;
                    IsVisible = true;

                    string eDocType = SelectedReportType;
                    string optDate = SelectedOptDate.ToString("yyyy-MM-dd");
                    await SearchClick();
                    break;
                case 404:

                    Message = "Unsuccessfully saved.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                case 401:

                    Message = "Bad internet request.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                default:

                    Message = "Error retrieving data from the database.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
            }
        }
        else
        {
            IsVisible = false;
        }
        StateHasChanged();

    }

    protected void BackClick() => NavigationManager.NavigateTo($"/Confirmation");

    protected void ConfirmClick(bool blnConfirm)
    {
        if (blnConfirm)
        {
        }
    }

}
