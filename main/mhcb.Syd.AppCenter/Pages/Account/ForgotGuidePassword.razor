@page "/ForgotGuidePassword"

<div class="container-fluid">

    <div class="card">
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h3 style="font-weight:normal; color:white;font-family: verdana;">Forgot GUIDE Password</h3>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <section>
                        <EditForm Model="@Input" OnValidSubmit="@Resend">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="col-6 row">
                                <label for="Email" class="col-form-label">Email</label><br />
                                <input type="text" id="emailaddress" readonly class="form-control col-12" @bind="Input.Email" placeholder="Email address" />
                            </div>
                            <br />
                            <div class="col-6 row">
                                <span class="col-12"></span>
                                <div class="well">
                                    <button class="btn btn-primary btn-width-200 m-1 float-left " type="submit">Submit</button>
                                </div>
                            </div>
                        </EditForm>
                    </section>
                </div>
            </div>

            @*<div id="divStatusMessage" class="col-12 alert alert-info">
            </div>*@
            <MessageStatusBar IsVisible="IsVisible" IsSuccess="IsSuccess">
                @StatusMessage
            </MessageStatusBar>
        </div>

        <div class="card-footer">
            <div class="container">
                &copy; 2022 - MIZUHO Sydney AppCenter - <a href="http://confluence/display/DEV/AppCenter">AppCenter Help</a>
            </div>
        </div>
    </div>
</div>

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using mhcb.Syd.AppCenter.Services;
@using mhcb.Syd.Models.Account;
@using mhcb.Syd.AppCenter.Services.Identity;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IEmailSender _emailSender;
@inject IConfiguration _configuration;
@inject IUserHttpService _httpServiceRole;

@* No long use UserManager directly rather than API call *@
@* @inject UserManager<IdentityUser> _userManager; *@
@inject IAccountHttpService _accountHttpService;

@code {

    private PasswordInput Input;

    private string ConfirmationMessage { get; set; }
    private string StatusMessage { get; set; }
    private string ErrorMessage { get; set; }

    public bool IsVisible { get; set; }
    public bool IsSuccess { get; set; }

    public IEnumerable<UserView> modelView { get; set; } = new List<UserView>();

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input = new PasswordInput();
        Input.Email = "";

        StatusMessage = StatusMessage ?? "";
        ErrorMessage = "";

        IsSuccess = false;
        IsVisible = false;

        var authstate = await authenticationState;
        var user = authstate.User;

        var user1 = await _accountHttpService.FindByNameAsync(user.Identity.Name.ToString());
        if (user1 == null)
        {
            Input.Email = "";
            StatusMessage = "Invalid GUIDE User";
            IsSuccess = false;
            IsVisible = true;
        }
        else
        {
            Input.Email = user1.Email.ToUpper();
        }

        await
        base.OnInitializedAsync();
    }

    private async Task<bool> Resend()
    {
        if (Input.Email == "" || Input.Email == null)
        {
            IsSuccess = false;
            ErrorMessage = "Email address is required.";
            //return await Task.FromResult(false);
        } 
        else
        {
            // ** the first version, which get roles information from Web client side. Now it is from server side.
            //var user = await _userManager.FindByEmailAsync(Input.Email);
            var user = await _accountHttpService.FindByEmailAsync(Input.Email);
            bool emailConfirm = false;
            try
            {
                // ** the first version, which get roles information from Web client side. Now it is from server side.
                //emailConfirm = await _userManager.IsEmailConfirmedAsync(user);
                emailConfirm = await _accountHttpService.IsEmailConfirmedByEmailAsync(Input.Email);
            }
            catch { }

            // check if it is valid user and active user
            if (user == null || !(emailConfirm))
            {
                IsSuccess = false;
                ErrorMessage = "Invalid email address.";
                //return await Task.FromResult(false);
            }
            else
            {
                string password="";
                modelView = await _httpServiceRole.LoadGuidePasswordByUserId(user.UserName);
                if (modelView.FirstOrDefault() == null)
                {
                    IsSuccess = false;
                    ErrorMessage = "You are not GUIDE User or not registered as GUIDE user.";
                    //return await Task.FromResult(false);
                }
                else
                {
                    password = modelView.FirstOrDefault().PASSWORD;
                }

                if (password != "" && password != null)
                {
                    try
                    {
                        await _emailSender.SendEmailAsync(
                              Input.Email,
                              "Forgot GUIDE Password",
                              $"Your GUIDE password is " + password + ", user Id is " + user.UserName);

                        IsSuccess = true;
                        StatusMessage = "GUIDE password has been sent.";
                    }
                    catch
                    {
                        IsSuccess = false;
                        ErrorMessage = "Error in Sending Email.";
                    }
                    finally { }
                }
            }
        }

        IsVisible = true;
        if (ErrorMessage != "") StatusMessage = ErrorMessage;

        // !! No longer nagivate to "/ResetPasswordConfirmation/"
        //NavigationManager.NavigateTo("/ForgotPasswordConfirmation/" + ConfirmationMessage);

        return await Task.FromResult(true);
    }
}