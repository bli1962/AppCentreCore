@page "/ResetPassword"
@page "/ResetPassword/{InputMessge}"

<div class="container-fluid">

    <div class="card">
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h3 style="font-weight:normal; color:white;font-family: verdana;">Reset Password</h3>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <section>
                        <EditForm Model="@Input" OnValidSubmit="@ResetPW">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="col-6 row">
                                <label for="Email" class="col-form-label">Email</label><br />
                                <input type="text" id="emailaddress" class="form-control col-12" readonly @bind="Input.Email" placeholder="Email address" />
                            </div>
                            <br />
                            <div class="col-6 row">
                                <label for="Password" class="col-form-label">New Password</label><br />
                                <input type="password" id="password" class="form-control col-12" @bind="Input.Password" placeholder="Password" />
                            </div>
                            <br />
                            <div class="col-6 row">
                                <label for="ConfirmPassword" class="col-form-label">Confirm New Password</label><br />
                                <input type="password" id="confirmpassword" class="form-control col-12" @bind="Input.ConfirmPassword" placeholder="Confirm password" />
                            </div>
                            <br />
                            <div class="col-6 row">
                                <span class="col-12"></span>
                                <div class="well">
                                    <button class="btn btn-primary btn-width-200 m-1 float-left" type="submit">Reset</button>
                                </div>
                            </div>
                            @*<div>
                            <p class="text-primary font-weight-normal">@StatusMessage</p>
                            </div>*@
                        </EditForm>
                    </section>
                </div>
            </div>
            @*<div id="divStatusMessage" class="col-12 alert alert-info">
            </div>*@
            <MessageStatusBar IsVisible="IsVisible" IsSuccess="IsSuccess">
                @StatusMessage
            </MessageStatusBar>
        </div>

        <div class="card-footer">
            <div class="container">
                &copy; 2022 - MIZUHO Sydney AppCenter - <a href="http://confluence/display/DEV/AppCenter">AppCenter Help</a>
            </div>
        </div>
    </div>
</div>

@using Microsoft.AspNetCore.Identity;
@using mhcb.Syd.AppCenter.Services;
@using mhcb.Syd.Models.Account;
@using mhcb.Syd.AppCenter.Services.Identity;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@* No long use UserManager directly rather than API call *@
@* @inject UserManager<IdentityUser> _userManager; *@
@inject IAccountHttpService _accountHttpService;

@code {

    private ResetPasswordInput Input;
    private string ConfirmationMessage { get; set; }
    private string StatusMessage { get; set; }
    private string ErrorMessage { get; set; }

    public bool IsVisible { get; set; }
    public bool IsSuccess { get; set; }

    [Parameter]
    public string InputMessge { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input = new ResetPasswordInput();
        Input.Id = InputMessge;

        ErrorMessage = "";
        IsSuccess = false;
        IsVisible = false;

        //var user1 = await _userManager.FindByIdAsync(Input.Id);
        var user1 = await _accountHttpService.FindByIdAsync(Input.Id);

        if (user1 == null)
        {
            Input.Email = "";
            StatusMessage = "Invalid user";
            NavigationManager.NavigateTo("/ForgotPassword");
        }
        else
        {
            Input.Email = user1.Email;
        }

        await
        base.OnInitializedAsync();
    }

    private async Task<bool> ResetPW()
    {
        if (Input.Email == "" || Input.Password == "")
        {
            ErrorMessage = "Invalid user email address or password";
            //return await Task.FromResult(false);
        }
        else
        {
            // ** the first version, which get roles information from Web client side. Now it is from server side.
            //var user = await _userManager.FindByEmailAsync(Input.Email);
            var user = await _accountHttpService.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                ErrorMessage = "Invalid user found.";

                // !! No longer nagivate to "/ResetPasswordConfirmation/"
                //NavigationManager.NavigateTo("/ResetPasswordConfirmation/" + ConfirmationMessage);
                //return await Task.FromResult(false);
            }
            else
            {
                // Retrieve the token again via MS build-in method.  B. Li
                // ** the first version, which get roles information from Web client side. Now it is from server side.
                //var code = await _userManager.GeneratePasswordResetTokenAsync(user);

                //var code = await _accountHttpService.GeneratePasswordResetTokenAsync(user.UserName);
                //Input.Code = code;

                // ** the first version, which get roles information from Web client side. Now it is from server side.
                //var result = await _userManager.ResetPasswordAsync(user, Input.Code, Input.Password);
                var result = await _accountHttpService.ResetPasswordByEmailAsync(user.Email, Input.Password);

                if (result == MessageValue.msgSuccess)
                {
                    IsSuccess = true;
                    StatusMessage = "Reset password successfully";

                    // !! No longer nagivate to "/ResetPasswordConfirmation/"
                    //NavigationManager.NavigateTo("/ResetPasswordConfirmation/" + ConfirmationMessage);
                    //return await Task.FromResult(true);
                }
                else
                {
                    //foreach (var error in result.Errors)
                    //{
                    //    StatusMessage = StatusMessage + "; " + error.Description;
                    //}

                    ErrorMessage = "Reset password unsuccessfully";

                    // !! No longer nagivate to "/ResetPasswordConfirmation/"
                    //NavigationManager.NavigateTo("/ResetPasswordConfirmation/" + StatusMessage);
                    //return await Task.FromResult(false);
                }
            }
        }

        IsVisible = true;
        if (!IsSuccess) StatusMessage = ErrorMessage;

        return await Task.FromResult(true);
    }

}
