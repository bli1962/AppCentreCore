@page "/ForgotPassword"

<div class="container-fluid">

    <div class="card">
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h3 style="font-weight:normal; color:white;font-family: verdana;">Forgot Password</h3>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <section>
                        <EditForm Model="@Input" OnValidSubmit="@ResetPassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="col-6 row">
                                <label for="Email" class="col-form-label">Email</label><br />
                                <input type="text" id="emailaddress" class="form-control col-12" @bind="Input.Email" placeholder="Email address" />
                            </div>
                            <br />
                            <div class="col-6 row">
                                <span class="col-12"></span>
                                <div class="well">
                                    <button class="btn btn-primary btn-width-200 m-1 float-left " type="submit">Submit</button>
                                </div>
                            </div>
                        </EditForm>
                    </section>
                </div>
            </div>

            @*<div id="divStatusMessage" class="col-12 alert alert-info">
            </div>*@
            <br />
            <MessageStatusBar IsVisible="IsVisible" IsSuccess="IsSuccess">
                @StatusMessage
            </MessageStatusBar>
        </div>
        <br />
        <SpinLoader IsLoading="IsLoading">
            <LoadingTemplate>
                <div class="col-12 bg-primary" style="height:150px; vertical-align:middle">
                    <br />
                    <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
                    <br />
                </div>
                <div class="top-row px-4">
                    <span><h5 class="text-primary"> Please wait ... </h5></span>
                </div>
            </LoadingTemplate>
        </SpinLoader>
        @* @if (IsLoading)
        {
        <div class="spinner"></div>
        } *@
        <div class="card-footer">
            <div class="container">
                &copy; 2022 - MIZUHO Sydney AppCenter - <a href="http://confluence/display/DEV/AppCenter">AppCenter Help</a>
            </div>
        </div>
        
    </div>
</div>

@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Identity;
@using mhcb.Syd.Models.Account;
@using mhcb.Syd.AppCenter.Services;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IEmailSender _emailSender;
@inject IConfiguration _configuration;
@inject IJSRuntime jsRuntime;

@* No long use UserManager directly rather than API call *@
@* @inject UserManager<IdentityUser> _userManager; *@
@inject IAccountHttpService _accountHttpService;

@code {
    private PasswordInput Input { get; set; }
    private string ConfirmationMessage { get; set; }
    private string StatusMessage { get; set; }
    private string ErrorMessage { get; set; }
    // private bool CompleteSubmission = true;

    public bool IsVisible { get; set; }
    public bool IsSuccess { get; set; }
    private bool IsLoading = false;

    protected override void OnInitialized()
    {
        Input = new PasswordInput();
        Input.Email = "";
        StatusMessage = StatusMessage ?? "";
        ErrorMessage = "";
        IsVisible = false;
        IsSuccess = false;
       
        base.OnInitialized();
    }

    private async Task<bool> ResetPassword()
    {
        if (Input.Email == "")
        {          
            IsVisible = true;
            IsSuccess = false;
            StatusMessage = "Invalid user name or email address";
            return await Task.FromResult(false);
        }

        IsLoading = true;
        // ** the first version, which get roles information from Web client side. Now it is from server side.
        //var user = await _userManager.FindByEmailAsync(Input.Email);
        var user = await _accountHttpService.FindByEmailAsync(Input.Email);
        if (user == null)
        {
           
            IsLoading = false;
            IsVisible = true;
            IsSuccess = false;
            StatusMessage = "Invalid user & email address.";
            return await Task.FromResult(false);
        }

        // ** the first version, which get roles information from Web client side. Now it is from server side.
        //var hasConfirmed = await _userManager.IsEmailConfirmedAsync(user);
        var emailConfirm = await _accountHttpService.IsEmailConfirmedByEmailAsync(Input.Email);
        if (!(emailConfirm))
        {
            StatusMessage = "Account is not active yet.";
            IsLoading = false;
            IsVisible = true;
            IsSuccess = false;
            return await Task.FromResult(false);
        }

        try
        {
            // Retrieve the token again via MS build-in method. B. Li
            // ** the first version, which get roles information from Web client side. Now it is from server side.
            //var token = await _userManager.GeneratePasswordResetTokenAsync(user);
            var token = await _accountHttpService.GeneratePasswordResetTokenAsync(user.UserName);

            string clientAddress = _configuration["ClientAddress"];
            //string returnUrl = "~/";
            //var callbackUrl = clientAddress
            //                + "/ResetPassword"
            //                + "?userId=" + user.Id
            //                + "&code=" + code
            //                + "&returnUrl=" + returnUrl;

            var callbackUrl = clientAddress
                            + "/ResetPassword"
                            + "/" + user.Id;

            await _emailSender.SendEmailAsync(
                   Input.Email,
                   "Reset Password",
                   $"Please reset your password by clicking here " + callbackUrl);

            IsSuccess = true;
            StatusMessage = "Please check you email to reset your password.";
        }
        catch
        {
            IsSuccess = false;
            ErrorMessage = "Error in sending email.";
            return await Task.FromResult(false);
        }
        finally
        {
            IsLoading = false;
        }

        if (!IsSuccess) StatusMessage = ErrorMessage;

        // Version I - use JavaScript to set html value
        //await jsRuntime.InvokeVoidAsync("showMessage", "divStatusMessage", StatusMessage);

        // Version II - use childComponent
        IsVisible = true;

        return await Task.FromResult(true);
    }
}
