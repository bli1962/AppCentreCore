@page "/AddCovenantReceiptTiming"
@using mhcb.Syd.DataAccess.Models.LOAN;

@attribute [Authorize]
<div class="container-fluid">
    <div class="card">
        @*Section 1 - Title *@
        <div class="card bg-primary text-white">
            <div class="card-header">
                <h4>Add Covenant Receipt Timing</h4>
            </div>
        </div>

        <div class="card-body">
            <div class="row ">
                <div class="col-sm-4">
                    <table class="table table-sm table-bordered table-primary Col-Head-Left">
                        <tbody>

                            <tr>
                                <td><label for="Id" class="col-form-label">Interval</label></td>
                                <td><input type="text" class="form-control" @bind="SelecteInterval" /></td>
                            </tr>
                            <tr>
                                <td><label for="Id" class="col-form-label">Date Part</label></td>
                                <td>
                                    <select class="form-control form-select-sm" @bind="SelectedDatePart">
                                        <option value="d">Days</option>
                                        <option value="m">Months</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td><label for="Id" class="col-form-label">Operated By</label></td>
                                <td><input type="text" class="form-control" @bind="SelectedAuthoriser" readonly /></td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="well">
                        <button class="btn btn-outline-primary m-1 float-left" @onclick="Confirmed">Add Receipt Timing</button>
                        <button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
                        <br />
                    </div>
                </div>
            </div>
        </div>


        @*Section 2 - Search*@
        <div class="card-body">

            @*Section 2 - Parameters*@
            <div class="row">
                <div class="col-sm-4">
                    <div class="well">
                        <button class="btn btn-outline-primary m-1 float-left " @onclick="(()=>SearchClick())">Get Receipt Timing</button>
                    </div>
                </div>
            </div>

            @if (modelView == null)
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-4">
                        <div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="width:600px;height:600px;">
                            @*Section 4 - list via TableTemplate*@
                            <TableTemplate Items="modelView.ToList()">
                                <TableHeader>
                                    <th>Order</th>
                                    @* <th>ID</th> *@
                                    <th>Timing Description</th>
                                    <th>Interval</th>
                                    <th>Date Part</th>

                                </TableHeader>
                                <RowTemplate Context="item">
                                    <th>@item.Order</th>
                                    <th>@item.TimingDesc</th>
                                    <th>@item.Interval</th>
                                    <th>@item.DatePart</th>

                                </RowTemplate>
                                <TableFooter>
                                    <th>Order</th>
                                    @* <th>ID</th> *@
                                    <th>Timing Description</th>
                                    <th>Interval</th>
                                    <th>Date Part</th>
                                </TableFooter>
                            </TableTemplate>
                        </div>
                    </div>
                </div>
            }
        </div>

        @*Section 3 - list display*@
        <div class="card-footer">
            @*Section 5 - Notes *@
            <div class="row ">
                <div class="col-sm-6">
                    <div class="panel" style="color: red; border-color: #ffffff; ">
                        <div class="panel-body">
                            @* <ul>
                            <li>Comment line 1</li>
                            <li>Comment line 2</li>
                            </ul> *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <ConfirmationBox Title="@Title"
                     Message="@Message"
                     YesButtonText="@YesButtonText"
                     NoButtonText="@NoButtonText"
                     InfoButtonText="@InfoButtonText"
                     BtnClass="@BtnClass"
                     ConfirmationChanged="Save"
                     InformationChanged="OkClick"
                     IsVisible="IsVisible"
                     IsInformationOnly="IsInformationOnly">
    </ConfirmationBox>
</div>


@inject ITrancheCovenantTypeHttpService _httpServiceCrud ;
@inject IHttpService<CovenantReceiptTiming> _httpService ;

@inject IJSRuntime IJSRuntime ;
@inject NavigationManager NavigationManager ;
@inject IJwtToken jwtToken ;

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public IEnumerable<CovenantReceiptTiming> modelView { get; set; } = new List<CovenantReceiptTiming>();

    public int SelectedTimingType { get; set; } = 1;
    public string SelectedTimingDesc { get; set; } = "";
    public int SelecteInterval { get; set; } = 0;
    public string SelectedDatePart { get; set; } = "";
    public int SelectedOrder { get; set; } = 1;
    public string SelectedAuthoriser { get; set; } = "";

    public string[] bitIntervals { get; set; }

    // ** Variables for confirmation box
    public string Title { get; set; }
    public string Message { get; set; }
    public string YesButtonText { get; set; }
    public string NoButtonText { get; set; }
    public string InfoButtonText { get; set; }
    public bool IsVisible { get; set; }
    public bool IsInformationOnly { get; set; }
    public string BtnClass { get; set; }
    // ** End

    protected override async Task OnInitializedAsync()
    {
        Title = "Covenant Receipt Timing Type";
        Message = "Do you want to save?";
        YesButtonText = "Yes";
        NoButtonText = "No";
        InfoButtonText = "OK";
        BtnClass = "btn btn-primary float-left";

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            SelectedAuthoriser = authenticationState.User.Identity.Name.ToUpper();
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        bitIntervals = new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
        await base.OnParametersSetAsync();
    }

    protected async Task SearchClick()
    {
        modelView = null;
        modelView = (await _httpService.GetAllAsync($"api/TrancheCovenantType/GetCovenantReceiptTiming", null)).ToList();

        if (modelView.Count() == 0)
        {
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No Covenant Receipt Timing found.";
        }
    }

    // ** Add for confirmation box
    protected async Task Confirmed()
    {
        Message = "Do you want to save?";
        IsVisible = true;
        IsInformationOnly = false;

        StateHasChanged();
        await Task.FromResult(true);
    }

    protected async Task Save(bool IsSave)
    {
        InputCovenantReceiptTiming status = new()
            {
                TimingType = SelectedTimingType,
                TimingDesc = SelectedTimingDesc,
                Interval = SelecteInterval,
                DatePart = SelectedDatePart,
                Order = SelectedOrder,

                AuthorizeBy = SelectedAuthoriser,
            };

        if (IsSave)
        {
            var result = await _httpServiceCrud.AddCovenantReceiptTiming(status);

            switch (result)
            {
                case 200:
                    Message = "Saved Successfully.";
                    IsInformationOnly = true;
                    IsVisible = true;

                    await SearchClick();
                    break;
                case 404:
                    Message = "Unsuccessfully saved.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                case 401:
                    Message = "Bad internet request.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
                default:
                    Message = "Error retrieving data from the database.";
                    IsInformationOnly = true;
                    IsVisible = true;
                    break;
            }
        }
        else
        {
            IsVisible = false;
        }
        StateHasChanged();
    }

    protected void OkClick() => IsVisible = false;
    protected void BackClick() => NavigationManager.NavigateTo($"/ELCS");
}