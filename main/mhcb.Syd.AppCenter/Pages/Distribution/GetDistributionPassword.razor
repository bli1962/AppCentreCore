@page "/GetDistributionPassword"

@attribute [Authorize]
<div class="container-fluid">

    <div class="card">
        @*Section 1 - Title *@
        <div class="card bg-primary text-white">
            <div class="card-header">
                <div class="row ">
                    <h4>EDistribution password</h4>
                </div>
            </div>
        </div>

        @*Section 2 - Edit*@
        <div class="card-body">

            <div class="col-sm-4">
                <EditForm Model="@inputModel" OnValidSubmit="@SubmitClick">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <table class="table table-sm table-bordered table-primary Col-Head-Left">
                            <tbody thead class="thead-light">
                                <tr>
                                    <td><label for="Id" class="col-form-label">Customer Abbr</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Customer Abbr." @bind-Value="inputModel.CustAbbr" />
                                        <ValidationMessage For="@(() => inputModel.CustAbbr)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Branch No</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Branch No" @bind-Value="inputModel.BranchNo" />
                                        <ValidationMessage For="@(() => inputModel.BranchNo)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Your email</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Email address" @bind-Value="inputModel.Email" disabled />
                                        <ValidationMessage For="@(() => inputModel.Email)" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="well">
                        <button class="btn btn-outline-primary m-1 float-left btn-width-180" type="submit">Send Me password</button>
                    </div>
                </EditForm>
                <div class="well">

                    <button class="btn btn-outline-primary m-1 btn-GoBack" @onclick="(()=>BackClick())">Back</button>
                </div>
            </div>
        </div>

        @*Section 2 - Search*@
        <div class="card-body">

            @*Section 2 - Parameters*@
            <div class="row">
                <div class="col-sm-4">
                    <EditForm Model="@searchCustModel" OnValidSubmit="@SearchCustomerClick">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <table class="table table-sm table-bordered table-primary Col-Head-Left">
                            <tbody thead class="thead-light">
                                <tr>
                                    <td><label for="Id" class="col-form-label">Customer Name</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Customer name." @bind-Value="searchCustModel.CustName" />
                                        <ValidationMessage For="@(() => searchCustModel.CustName)" />
                                    </td>
                                </tr>
                                <tr>
                                    <td><label for="Id" class="col-form-label">Branch No</label></td>
                                    <td>
                                        <InputText class="form-control" placeholder="Branch No" @bind-Value="searchCustModel.BranchNo" />
                                        <ValidationMessage For="@(() => searchCustModel.BranchNo)" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <div class="well">
                            <button class="btn btn-outline-info m-1 float-left btn-width-180" type="submit">Get EDist. Password</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            @if (modelViewDist == null && searchCustModel.CustName != "")
            {
                <div class="spinner"></div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div name="SelectedReport" class="table-wrapper-scroll-y my-custom-scrollbar" style="height:600px;">
                            @*Section 4 - list via TableTemplate*@
                            <TableTemplate Items="modelViewDist.ToList()">
                                <TableHeader>
                                    <th>Customer Abbrivation</th>
                                    <th>Branch No</th>
                                    <th>Customer Name</th>
                                    <th>Dist. Password</th>
                                    <th>GCIF Number</th>
                                    <th>Address 1</th>
                                    <th>Address 2</th>
                                </TableHeader>
                                <RowTemplate Context="item">
                                    <td>@item.CUST_ABBR</td>
                                    <td>@item.BRANCH_NO</td>
                                    <td>@item.CUST_NAME</td>
                                    <td>@item.Password</td>
                                    <td>@item.STEPS_CUST_CD</td>
                                    <td>@item.ADDRESS</td>
                                    <td>@item.ADDRESS2</td>
                                </RowTemplate>
                                <TableFooter>
                                    <th>Customer Abbrivation</th>
                                    <th>Branch No</th>
                                    <th>Customer Name</th>
                                    <th>Dist. Password</th>
                                    <th>GCIF Number</th>
                                    <th>Address 1</th>
                                    <th>Address 2</th>
                                </TableFooter>
                            </TableTemplate>
                        </div>
                    </div>
                </div>               
            }
        </div>
    </div>

    <ConfirmationBox Title="@Title"
                     Message="@Message"
                     YesButtonText="@YesButtonText"
                     NoButtonText="@NoButtonText"
                     InfoButtonText="@InfoButtonText"
                     BtnClass="@BtnClass"
                     ConfirmationChanged="Save"  
                     InformationChanged="OkClick"
                     IsVisible="IsVisible"
                     IsInformationOnly="IsInformationOnly">
    </ConfirmationBox>
</div>


@inject IHttpService<DistributionPasswordView> _httpServicePW;
@inject IHttpService<CustDistirbutionInfo> _httpServiceDist;
@inject IEmailSender _emailSender;
@inject IAccountHttpService _accountHttpService;
@inject IJSRuntime IJSRuntime;
@inject NavigationManager navigationManager;

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
   
    public IEnumerable<DistributionPasswordView> modelViewPW { get; set; } = new List<DistributionPasswordView>();
    public IEnumerable<CustDistirbutionInfo> modelViewDist { get; set; } = new List<CustDistirbutionInfo>();

    public InputModel inputModel = new InputModel()
        {
            Email = "",
            CustAbbr = "",
            BranchNo = "751"
        };

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        public string CustAbbr { get; set; }
        [Required]
        public string BranchNo { get; set; }
    }

    // ** Variables for confirmation box
    public string Title { get; set; }
    public string Message { get; set; }
    public string YesButtonText { get; set; }
    public string NoButtonText { get; set; }
    public string InfoButtonText { get; set; }
    public bool IsVisible { get; set; }
    public bool IsInformationOnly { get; set; }
    public string BtnClass { get; set; }
    // ** End

    protected override async Task OnInitializedAsync()
    {
        Title = "EDistribution Password";
        Message = "Do you want to save?";
        YesButtonText = "Yes";
        NoButtonText = "No";
        InfoButtonText = "OK";
        BtnClass = "btn btn-primary float-left";

        var authenticationState = await authenticationStateTask;
        //var user = await _userManager.FindByNameAsync(authenticationState.User.Identity.Name);
        var user = await _accountHttpService.FindByNameAsync(authenticationState.User.Identity.Name);

        if (user == null)
        {
            // Don't reveal that the user does not exist or email does not belong to login user
            //ConfirmationComponent.Show();
            IsVisible = false;
            IsInformationOnly = true;
            Message = "No eDistribution password records found.";
        }
        else
        {
            inputModel.Email = user.Email.ToLower();
        }
    }

    protected CustInfohModel searchCustModel = new()
        {
            CustAbbr = "",
            BranchNo = "",
            CustName = ""
        };

    protected async Task SearchCustomerClick()
    {
        if ((searchCustModel.CustName == "")) return;

        modelViewDist = null;
        string custName = searchCustModel.CustName;
        string branchNo = searchCustModel.BranchNo;
        modelViewDist = (await _httpServiceDist.GetAllAsync($"api/CustomerMasters/LoadDistirbutionPassword/{custName}/{branchNo}", null)).ToList();

        if (modelViewDist.Count() == 0)
        {
            //ConfirmationComponent.Show();
            IsVisible = true;
            IsInformationOnly = true;
            Message = "No records found.";
        }
    }

    protected void Save(bool IsSave) { IsVisible = IsSave; }
    protected void OkClick() => IsVisible = false;

    protected async Task SubmitClick()
    {
        var authenticationState = await authenticationStateTask;

        //var user = await _userManager.FindByEmailAsync(inputModel.Email);
        var user = await _accountHttpService.FindByEmailAsync(inputModel.Email);
        var emailConfirm = await _accountHttpService.IsEmailConfirmedByEmailAsync(inputModel.Email);

        if ((user == null || !(emailConfirm)) ||
            (user.UserName.ToUpper() != authenticationState.User.Identity.Name.ToUpper()))
        {
            // Don't reveal that the user does not exist or email does not belong to login user

            //ConfirmationComponentError.Show();
            IsVisible = true;
            IsInformationOnly = true;
            Message = "Invalid Account.";
        }
        else
        {
            string abbreviation = inputModel.CustAbbr;
            string branch = inputModel.BranchNo;
            modelViewPW = (await _httpServicePW.GetAllAsync($"api/Distribution/GetDistributionPassword/{abbreviation}/{branch}", null)).ToList();

            if (modelViewPW.Count() == 0)
            {
                //ConfirmationComponent.Show();
                IsVisible = true;
                IsInformationOnly = true;
                Message = "No EDistribution password found.";
            }
            else
            {
                string password = modelViewPW.FirstOrDefault().Password;
                if (password != "")
                {
                    try
                    {
                        await _emailSender.SendEmailAsync(
                              inputModel.Email,
                              "EDistribution Password",
                              $"EDistribution document password for customer " + inputModel.CustAbbr + " is " + password);
                    }
                    catch { }
                    navigationManager.NavigateTo($"/GetDistributionPasswordConfirmation");
                }
                else
                {
                    IsVisible = true;
                    IsInformationOnly = true;
                    Message = "No EDistribution password found.";
                }
            }
        }
    }

    protected void BackClick() => navigationManager.NavigateTo($"/EDistribution");

}